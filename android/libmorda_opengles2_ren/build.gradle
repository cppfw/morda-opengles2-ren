apply plugin: "com.android.model.library"

def ndkDir = System.getenv("ANDROID_NDK_HOME")
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(propertiesFile.newDataInputStream())
    ndkDir = properties.getProperty('ndk.dir')
}

def ndkInc = ndkDir + "/sysroot/usr/include"

model {
    android {
        compileSdkVersion = 26
        buildToolsVersion = '26.0.2'

        defaultConfig {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 9
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 21
            moduleName = "morda-opengles2-ren"
            toolchain = 'clang'
            abiFilters.addAll(['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'])
            ldLibs.addAll(['android', 'log', 'morda', 'GLESv2'])
            stl = 'c++_static'
            cppFlags.add("-std=c++11")
            cppFlags.add("-fexceptions")
            cppFlags.add("-frtti")
            cppFlags.add("-g")
            cppFlags.add("-fintegrated-as") //needed to avoid assembler error since NDK r15
            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
            cppFlags.addAll(["-isystem", ndkInc])
            cppFlags.add("-D__ANDROID_API__=" + platformVersion)
            cppFlags.add("-DANDROID_STL=c++_shared")
        }
        abis {
            create("armeabi-v7a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi-v7a")
                cppFlags.addAll(["-isystem", ndkInc + "/arm-linux-androideabi"])
            }
            create("arm64-v8a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/arm64-v8a")
                cppFlags.addAll(["-isystem", ndkInc + "/aarch64-linux-android"])
            }
            create("x86") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86")
                cppFlags.addAll(["-isystem", ndkInc + "/i686-linux-android"])
            }
            create("x86_64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86_64")
                cppFlags.addAll(["-isystem", ndkInc + "/x86_64-linux-android"])
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "../../src/"
                }
                source {
                    srcDirs '../../src'
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'io.github.igagis:libutki:+'
    compile 'io.github.igagis:libmorda:+'
}


//===================================
//=== Extract NDK files from AARs ===

task extractNDKLibs {
    doLast {
        configurations.compile.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}
build.dependsOn('extractNDKLibs')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile')) {
        task.dependsOn('extractNDKLibs')
    }
}



//=================================
//=== pack library files to aar ===


def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../src") {
        exclude('makefile')
        exclude('soname.txt')
        exclude('**/*.cpp')
        exclude('**/*.c')
        into('ndkLibs/include')
    }
    from("build/intermediates/binaries/debug/lib"){
        include('**/*.a')
        into('ndkLibs')
    }
}

build.finalizedBy('copyNdkLibsToAAR')